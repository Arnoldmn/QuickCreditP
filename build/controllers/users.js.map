{"version":3,"sources":["../../server/controllers/users.js"],"names":["UsersController","req","res","status","json","data","users","body","email","firstname","lastname","password","address","isAdmin","userExists","find","user","error","id","length","push","jwt","sign","userId","token","resp","auth","firstName","lastName","params","singleUser","usersController"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\nimport users from '../db/users';\n\nclass UsersController {\n  getAllUsers(req, res) {\n    res.status(200).json({\n      status: 200,\n      data: users,\n    });\n  }\n\n  signup(req, res) {\n    const {\n      email,\n      firstname,\n      lastname,\n      password,\n      address,\n      status,\n      isAdmin,\n    } = req.body;\n\n    const userExists = users.find(user => user.email === email);\n\n    if (userExists) {\n      res.status(409).json({\n        status: 409,\n        error: 'User already exists',\n      });\n    }\n\n    const user = {};\n    user.id = users.length + 1;\n    user.email = email;\n    user.firstname = firstname;\n    user.lastname = lastname;\n    user.password = password;\n    user.address = address;\n    user.status = 'pending' || 'approved';\n    user.isAdmin = true || false;\n    users.push(user);\n    jwt.sign(\n      {\n        userId: users.id,\n        email: users.email,\n        password: users.password,\n      },\n      'secretkey',\n      (error, token) => {\n        if (error) {\n          return res.status(401).json({\n            status: 401,\n            data: 'user already exits',\n          });\n        }\n        user.token = token;\n        const resp = {\n          status: 200,\n          data: {\n            token: user.token,\n            id: user.id,\n            email: user.email,\n            firstname: user.firstname,\n            lastname: user.lastname,\n            password: user.password,\n            address: user.address,\n            status: user.status === 'rejected' || 'approved',\n            isAdmin: user.isAdmin === true || false,\n          },\n        };\n\n        res.status(200).json(resp);\n      },\n    );\n  }\n\n  signin(req, res) {\n    const { email, password } = req.body;\n    const user = users.find(\n      user => user.email === email && user.password === password,\n    );\n    if (!user) {\n      res.status(401).json({\n        status: 401,\n        token: null,\n        auth: false,\n        error: 'invalid username or password',\n      });\n    }\n\n    jwt.sign(\n      {\n        userId: users.id,\n        email: users.email,\n        password: users.password,\n      },\n      'secretkey',\n      (error, token) => {\n        if (error) {\n          return res.status(401).json({\n            status: 401,\n            data: 'user doesnt exit',\n          });\n        }\n        user.token = token;\n        const resp = {\n          status: 201,\n          data: {\n            token,\n            userId: users.id,\n            firstName: users.firstName,\n            lastname: users.lastName,\n          },\n        };\n        res.status(201).json(resp);\n      },\n    );\n  }\n\n  UserIsVerified(req, res) {\n    const user = users.find(user => user.email === req.params.email);\n    if (!user) {\n      return res.status(201).json({\n        status: 404,\n        error: 'User not found',\n      });\n    }\n    singleUser.status = req.body.status;\n    const resp = {\n      email: users.email,\n      firstname: users.firstname,\n      lastname: users.lastname,\n      address: users.address,\n      status: users.status,\n    };\n    return res.status(200).json({\n      status: 200,\n      data: resp,\n    });\n  }\n}\n\nconst usersController = new UsersController();\nexport default usersController;\n"],"file":"users.js"}