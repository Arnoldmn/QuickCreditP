{"version":3,"sources":["../../server/tests/user-signup-test.js"],"names":["chai","should","use","chaiHttp","expect","describe","it","done","newUser","email","firstname","lastname","password","address","request","app","post","send","end","_data","res","body","data","to","have","property","req","status","error","be","equal"],"mappings":";;AACA;;AACA;;AACA;;;;AAHA;AAKAA,iBAAKC,MAAL;;AACAD,iBAAKE,GAAL,CAASC,oBAAT;;IACQC,M,GAAWJ,gB,CAAXI,M;AAERC,QAAQ,CAAC,cAAD,EAAiB,YAAM;AAC7BC,EAAAA,EAAE,CAAC,kDAAD,EAAqD,UAACC,IAAD,EAAU;AAC/D;;;AAGA,QAAMC,OAAO,GAAG;AACdC,MAAAA,KAAK,EAAE,uBADO;AAEdC,MAAAA,SAAS,EAAE,MAFG;AAGdC,MAAAA,QAAQ,EAAE,KAHI;AAIdC,MAAAA,QAAQ,EAAE,QAJI;AAKdC,MAAAA,OAAO,EAAE;AALK,KAAhB;AAOA;;;;AAGAb,qBACGc,OADH,CACWC,kBADX,EAEGC,IAFH,CAEQ,qBAFR,EAGGC,IAHH,CAGQT,OAHR,EAIGU,GAJH,CAIO,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACnBhB,MAAAA,MAAM,CAACgB,GAAG,CAACC,IAAJ,CAASC,IAAV,CAAN,CAAsBC,EAAtB,CAAyBC,IAAzB,CAA8BC,QAA9B,CAAuC,OAAvC;AACArB,MAAAA,MAAM,CAACgB,GAAG,CAACC,IAAJ,CAASC,IAAV,CAAN,CAAsBC,EAAtB,CAAyBC,IAAzB,CAA8BC,QAA9B,CAAuC,WAAvC;AACArB,MAAAA,MAAM,CAACgB,GAAG,CAACC,IAAJ,CAASC,IAAV,CAAN,CAAsBC,EAAtB,CAAyBC,IAAzB,CAA8BC,QAA9B,CAAuC,UAAvC;AACArB,MAAAA,MAAM,CAACgB,GAAG,CAACC,IAAJ,CAASC,IAAV,CAAN,CAAsBC,EAAtB,CAAyBC,IAAzB,CAA8BC,QAA9B,CAAuC,UAAvC;AACArB,MAAAA,MAAM,CAACgB,GAAG,CAACC,IAAJ,CAASC,IAAV,CAAN,CAAsBC,EAAtB,CAAyBC,IAAzB,CAA8BC,QAA9B,CAAuC,SAAvC;AACArB,MAAAA,MAAM,CAACgB,GAAG,CAACC,IAAJ,CAASC,IAAV,CAAN,CAAsBC,EAAtB,CAAyBC,IAAzB,CAA8BC,QAA9B,CAAuC,QAAvC;AACAlB,MAAAA,IAAI;AACL,KAZH;AAaD,GA3BC,CAAF;AA6BAD,EAAAA,EAAE,CAAC,0DAAD,EAA6D,UAACC,IAAD,EAAU;AACvE,QAAMC,OAAO,GAAG;AACdC,MAAAA,KAAK,EAAE,uBADO;AAEdC,MAAAA,SAAS,EAAE,MAFG;AAGdC,MAAAA,QAAQ,EAAE,KAHI;AAIdC,MAAAA,QAAQ,EAAE,QAJI;AAKdC,MAAAA,OAAO,EAAE;AALK,KAAhB;;AAOAb,qBAAKc,OAAL,CAAaC,kBAAb,EAAkBC,IAAlB,CAAuB,qBAAvB,EACGC,IADH,CACQT,OADR,EAEGU,GAFH,CAEO,UAACQ,GAAD,EAAMN,GAAN,EAAc;AACjBhB,MAAAA,MAAM,CAACgB,GAAD,CAAN,CAAYG,EAAZ,CAAeC,IAAf,CAAoBG,MAApB,CAA2B,GAA3B;AACAvB,MAAAA,MAAM,CAACgB,GAAG,CAACC,IAAJ,CAASO,KAAV,CAAN,CAAuBL,EAAvB,CAA0BM,EAA1B,CAA6BC,KAA7B,CAAmC,qBAAnC;AACAvB,MAAAA,IAAI;AACL,KANH;AAOD,GAfC,CAAF;AAgBD,CA9CO,CAAR","sourcesContent":["/* eslint-disable no-undef */\nimport chaiHttp from 'chai-http';\nimport chai from 'chai';\nimport app from '../server';\n\nchai.should();\nchai.use(chaiHttp);\nconst { expect } = chai;\n\ndescribe('User sign up', () => {\n  it('Should return a 201 and confirm user valid input', (done) => {\n    /**\n     * request new user input\n     */\n    const newUser = {\n      email: 'johndoe@quicredit.com',\n      firstname: 'john',\n      lastname: 'doe',\n      password: 'secret',\n      address: 'Gisozi',\n    };\n    /**\n     * send  user request\n     */\n    chai\n      .request(app)\n      .post('/api/v1/auth/signup')\n      .send(newUser)\n      .end((_data, res) => {\n        expect(res.body.data).to.have.property('email');\n        expect(res.body.data).to.have.property('firstname');\n        expect(res.body.data).to.have.property('lastname');\n        expect(res.body.data).to.have.property('password');\n        expect(res.body.data).to.have.property('address');\n        expect(res.body.data).to.have.property('status');\n        done();\n      });\n  });\n\n  it('Should return error 401 when email is already registered', (done) => {\n    const newUser = {\n      email: 'johndoe@quicredit.com',\n      firstname: 'john',\n      lastname: 'doe',\n      password: 'secret',\n      address: 'Gisozi',\n    };\n    chai.request(app).post('/api/v1/auth/signup')\n      .send(newUser)\n      .end((req, res) => {\n        expect(res).to.have.status(409);\n        expect(res.body.error).to.be.equal('User already exists');\n        done();\n      });\n  });\n});\n"],"file":"user-signup-test.js"}